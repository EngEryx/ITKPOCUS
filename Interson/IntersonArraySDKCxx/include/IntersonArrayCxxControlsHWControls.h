/*=========================================================================

Library:   IntersonArray

Copyright Kitware Inc. 28 Corporate Drive,
Clifton Park, NY, 12065, USA.

All rights reserved.

Licensed under the Apache License, Version 2.0 ( the "License" );
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=========================================================================*/
#ifndef _IntersonArrayCxxControlsHWControls_h
#define _IntersonArrayCxxControlsHWControls_h

// Export library, autogenerated using Cmake
#include "IntersonArrayCxx_Export.h"

#include <string>
#include <vector>

// Namespace similar to IntersonArray Namespace from SDK

/*
The library is organized via namespaces; the root is IntersonArray,
then IntersonArray.Controls to get the methods which access to the
USB probe controls, IntersonArray.Imaging is the scan converter, to
build the 2D image B-Scan bitmap from the log-compressed A-Scan
vectors.
*/
namespace IntersonArrayCxx
{
// Namespace similar to IntersonArray.Controls Namespace from SDK
namespace Controls
{
// Wrapper Class for IntersonArrayClass from SDK
class HWControlsImpl;

// HWControls similar to IntersonArrayClass from SDK
class IntersonArrayCxx_EXPORT HWControls
{
public:
  typedef std::vector< std::string >   FoundProbesType;
  typedef std::vector< int >           FrequenciesType;
  typedef std::vector< int >           FocusType;

  HWControls();
  ~HWControls();

  static const int DIG_GAIN_MIN = -127;
  static const int DIG_GAIN_INIT = 0;
  static const int DIG_GAIN_MAX = 127;

  // Maximum number of frequencies
  static const int MAX_FREQ = 3;

  // Maximum focus
  static const int MAX_FOCUS = 3;

  // Maximum stgeering angle
  static const int MAX_STERING_ANGLE = 30;

  // These are the valid Probe IDs.
  static const int ID_A_7_5MHz = 256;
  static const int ID_CA_5_0MHz = 512;
  static const int ID_CA_OP_10MHz = 768;
  static const int ID_A_OP_10MHz = 1024;
  static const int ID_A_OP_12MHz = 1280;

  // Size of the OEM (Original equipment manufacturer) space in the Probe
  // EEPROM number of frequencies.
  // http://en.wikipedia.org/wiki/Original_equipment_manufacturer
  static const unsigned short int EEOEMSpace = 6144;

  // Compound Angle Functions
  int GetCompoundAngle() const;
  bool EnableCompound();
  bool DisableCompound();

  // Doubler Functions
  bool EnableDoubler();
  bool DisableDoubler();

  // To get the ID of the probe
  short GetProbeID() const;

  // String Vector with all probe names connected
  void FindAllProbes( FoundProbesType &foundProbes ) const;

  // Summary: To open a handle to the probe defined by the ProbeIndex.
  // Parameters:  " ProbeIndex ": Index in the mycolProbesName collection
  void FindMyProbe( int probeIndex );

  // Angle
  float GetArrayAngle() const;

  // Radius
  float GetArrayRadius() const;

  // Width
  float GetArrayWidth() const;

  // Focus
  void GetFocus( FocusType & focus ) const;

  // To check if the chosen Depth is valid for the probe. Returns the same
  // depth if in the max range, otherwise returns the max depth
  int ValidDepth( int depth ) const;

  // Get/Set the list of supported frequencies. Units: Hz.
  void GetFrequency( FrequenciesType &frequencies ) const;
  bool SetFrequencyAndFocus( unsigned char frequency, unsigned char focus,
    int steering );

  // Lines per array
  unsigned int GetLinesPerArray() const;

  //" voltage ": percentage of the maximum of the High Voltage. Returns
  //whether the command succeeded (true) or failed (false)
  bool SendHighVoltage( unsigned char voltage, unsigned char voltageCfm );
  bool EnableHighVoltage();
  bool DisableHighVoltage();

  // To set the value of the dynamic and to calculate the value sent to
  // the control. " bytDynamic ": value of the Dynamic (db).
  // Returns: Returns whether the command succeeded (true) or failed (false)
  bool SendDynamic( unsigned char dynamic );

  // To Start watching the Hardware Button to enable to raise the event
  // HWButtonTickù
  void EnableHardButton();
  void DisableHardButton();
  unsigned char ReadHardButton();
  
  typedef void (__stdcall *NewHardButtonCallbackType)( void *clientData );
  void SetNewHardButtonCallback( NewHardButtonCallbackType callback,
    void *clientData = NULL );

  bool StartBmode();
  bool StartRFmode();
  bool StopAcquisition();

  //To get the Frame Rate of that probe according to the depth
  //" iDepth ": current depth. Returns: Return the current Frame Rate
  short GetProbeFrameRate() const;

  // To get the Serial Number of the probe
  std::string GetProbeSerialNumber() const;

  // To get the version of the software installed in the FPGA.
  std::string ReadFPGAVersion() const;

  // To get the identification of the OEM
  std::string GetOEMId() const;

  // To get the identification of 3D
  std::string Get3DId() const;

  //To get the identification of the filter.
  std::string GetFilterId() const;

  bool DoReadOEMEEPROM( unsigned char * bytDataStage, unsigned short addr,
    unsigned short length );

  bool DoWriteOEMEEPROM( unsigned char * bytDataStage, unsigned short addr,
    unsigned short length );


private:
  HWControls( const HWControls &);
  void operator=( const HWControls &);

  HWControlsImpl *Impl;
};

} // end namespace Controls

} // end namespace IntersonArrayCxx


#endif // _IntersonArrayCxxControlsHWControls_h
